/* RemoteDataListTree v1.51 2020 Copyright Tomasz Kunicki, AdRem Software, all rights reserved */
(function(){"use strict";const prv=Symbol("private");class RemoteDataListTreeNode extends adrem.EventManager{constructor(values,parentNode){super();this.id=values.Id;this.name=values.Name;if(values.Value!==null){this.value=values.Value}Object.defineProperty(this,"parent",{value:values.Parent,enumerable:false});Object.defineProperty(this,"parentNode",{value:parentNode,enumerable:false,configurable:true})}get values(){return this.children?Array.from(this.children.values()).filter(c=>c.value!==undefined).map(c=>({name:c.name,value:c.value})):[]}get childCount(){return this.children!=null?this.children.size:0}_addChild(node){this.children=this.children!=null?this.children:new Map;if(!this.children.has(node.name)){this.children.set(node.name,node);this._notifyChanged()}}_deleteNode(){if(this.children!==undefined){this.children.forEach(n=>n._deleteNode());this.children.clear()}if(this.parentNode){this.parentNode._childDeleted(this.id)}this._notifyDelete()}_childDeleted(childId){if(this.children.has(childId)){this.children.delete(childId);this._notifyChildChanged()}}_notifyParentChildChanged(child){if(this.parentNode!==undefined){this.parentNode._notifyChildChanged(child)}}_notifyDelete(){this.fireEvent("node-deleted");this._notifyParentChildChanged(this)}_notifyChanged(){this.fireEvent("node-changed",this);this._notifyParentChildChanged(this)}_notifyChildChanged(){this.fireEvent("node-children-changed",this);this._notifyParentChildChanged()}node(path){const parts=path.split("\\").filter(s=>s!=="");return parts.reduce((p,c)=>p!==undefined&&p.children!=null?p.children.get(c):undefined,this)}}class RemoteDataListTreeStore extends adrem.EventManager{constructor(api,source,callback,scope,connection){super();this.store=new adrem.RemoteDataListStore(api,250,connection);this.treeMap=new Map;this.store.on("record-changed",this.onRecordChanged,this);this.store.on("record-deleted",this.onRecordDeleted,this);this.store.on("changed",this.onTreeChanged,this);this.store.on("change-marker",this.onChangeMarker,this);this.store.open(source,"",()=>{this.buildTree();if(typeof callback==="function"){callback.call(scope||this,this)}})}finalize(){this.store.finalize();this.store.destroy();delete this.store}updateNodeByRec(rec){const node=this.treeMap.get(rec.values.Id);if(node==null){this.addNode(rec.values)}else{let changed=false;if(rec.values.Value!==undefined){node.value=rec.values.Value;changed=true}if(rec.values.Name!==undefined){node.name=rec.values.Name;changed=true}if(changed){node._notifyChanged()}}}deleteNodeByRec(rec){const id=rec.values.Id,node=this.treeMap.get(id);if(node!=null){this.fireEvent("node-deleted",node);node._deleteNode()}this.treeMap.delete(id)}onRecordChanged(rec){if(Array.isArray(rec)){rec.sort((a,b)=>a.values.Id>b.values.Id?1:-1,rec);rec.forEach(this.updateNodeByRec,this)}else{this.updateNodeByRec(rec)}}onRecordDeleted(rec){if(Array.isArray(rec)){rec.forEach(this.deleteNodeByRec,this)}else{this.deleteNodeByRec(rec)}}onTreeChanged(){this.fireEvent("changed")}onChangeMarker(markerData){const{path:path,marker:marker}=markerData||{};const node=this.node(path);if(node!=null){node.fireEvent("node-change-marker",marker)}}addNode(values){const parentNode=this.treeMap.get(values.Parent),node=new RemoteDataListTreeNode(values,parentNode);this.treeMap.set(node.id,node);if(parentNode!==undefined){parentNode._addChild(node)}else if(node.parent===-1){this.root=node}else{console.error("Tree internal error - parent node is missing.",values)}this.fireEvent("node-added",node)}node(path){return this.root===undefined?undefined:this.root.node(path)}buildTree(){if(this.store!==null){this.treeMap.clear();this.store.data.sort((a,b)=>a.values.Id-b.values.Id).forEach(rec=>this.addNode(rec.values))}}}class RemoteDataListTree{constructor(api,source,callback,scope,connection){const tree=new RemoteDataListTreeStore(api,source,callback,scope,connection);this[prv]=tree;this.on=tree.on}on(args){this[prv].on(...args)}un(args){this[prv].un(...args)}destroy(){this[prv].finalize()}node(path){return this[prv].node(path)}query(query,callback){this[prv].store.perform("query",query,callback)}def(path,name,obj,callback,scope){if(obj[name]===undefined){const node=this.node(path);obj[name]=node;if(node!==undefined){if(typeof callback==="function"){node.on("node-children-changed",callback,scope);callback.call(scope,node)}}}}}adrem.RemoteDataListTree=RemoteDataListTree;if(typeof module==="object"){module.exports=RemoteDataListTree}})();